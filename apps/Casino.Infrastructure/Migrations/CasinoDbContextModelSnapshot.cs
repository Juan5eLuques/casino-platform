// <auto-generated />
using System;
using System.Text.Json;
using Casino.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Casino.Infrastructure.Migrations
{
    [DbContext(typeof(CasinoDbContext))]
    partial class CasinoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Casino.Domain.Entities.BackofficeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<JsonDocument>("Meta")
                        .HasColumnType("jsonb");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BackofficeAudits");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BackofficeUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OperatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("BackofficeUsers");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminDomain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CorsOrigins")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Domain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("Theme")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AdminDomain")
                        .IsUnique()
                        .HasFilter("\"AdminDomain\" IS NOT NULL");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Domain")
                        .IsUnique()
                        .HasFilter("\"Domain\" IS NOT NULL");

                    b.HasIndex("OperatorId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BrandGame", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BrandId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("BrandGames");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BrandProviderConfig", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("AllowNegativeOnRollback")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<JsonDocument>("Meta")
                        .HasColumnType("jsonb");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("BrandId", "ProviderCode");

                    b.ToTable("BrandProviderConfigs");
                });

            modelBuilder.Entity("Casino.Domain.Entities.CashierPlayer", b =>
                {
                    b.Property<Guid>("CashierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("CashierId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("CashierPlayers");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Casino.Domain.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GameCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Ledger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("DeltaBigint")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalRef")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GameCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<JsonDocument>("Meta")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RoundId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ExternalRef")
                        .IsUnique()
                        .HasFilter("external_ref IS NOT NULL");

                    b.HasIndex("OperatorId");

                    b.HasIndex("RoundId");

                    b.HasIndex("PlayerId", "Id")
                        .HasDatabaseName("IX_Ledger_PlayerId_Id_Desc");

                    b.ToTable("Ledger");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId", "ExternalId")
                        .IsUnique()
                        .HasFilter("external_id IS NOT NULL");

                    b.HasIndex("BrandId", "Username")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Casino.Domain.Entities.ProviderAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ExternalRef")
                        .HasColumnType("text");

                    b.Property<string>("PlayerId")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<JsonDocument>("RequestData")
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("ResponseData")
                        .HasColumnType("jsonb");

                    b.Property<string>("RoundId")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProviderAudits");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TotalBetBigint")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalWinBigint")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<long>("BalanceBigint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("PlayerId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BackofficeAudit", b =>
                {
                    b.HasOne("Casino.Domain.Entities.BackofficeUser", "User")
                        .WithMany("BackofficeAudits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BackofficeUser", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Operator", "Operator")
                        .WithMany("BackofficeUsers")
                        .HasForeignKey("OperatorId");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Brand", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Operator", "Operator")
                        .WithMany("Brands")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BrandGame", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Brand", "Brand")
                        .WithMany("BrandGames")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Casino.Domain.Entities.Game", "Game")
                        .WithMany("BrandGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BrandProviderConfig", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Brand", "Brand")
                        .WithMany("ProviderConfigs")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Casino.Domain.Entities.CashierPlayer", b =>
                {
                    b.HasOne("Casino.Domain.Entities.BackofficeUser", "Cashier")
                        .WithMany("CashierPlayers")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Casino.Domain.Entities.Player", "Player")
                        .WithMany("CashierPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Casino.Domain.Entities.GameSession", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Game", null)
                        .WithMany("GameSessions")
                        .HasForeignKey("GameId");

                    b.HasOne("Casino.Domain.Entities.Player", "Player")
                        .WithMany("GameSessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Ledger", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Brand", "Brand")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Casino.Domain.Entities.Operator", "Operator")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Casino.Domain.Entities.Player", "Player")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Casino.Domain.Entities.Round", "Round")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("RoundId");

                    b.Navigation("Brand");

                    b.Navigation("Operator");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Player", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Brand", "Brand")
                        .WithMany("Players")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Round", b =>
                {
                    b.HasOne("Casino.Domain.Entities.GameSession", "Session")
                        .WithMany("Rounds")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Casino.Domain.Entities.Player", "Player")
                        .WithOne("Wallet")
                        .HasForeignKey("Casino.Domain.Entities.Wallet", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Casino.Domain.Entities.BackofficeUser", b =>
                {
                    b.Navigation("BackofficeAudits");

                    b.Navigation("CashierPlayers");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Brand", b =>
                {
                    b.Navigation("BrandGames");

                    b.Navigation("LedgerEntries");

                    b.Navigation("Players");

                    b.Navigation("ProviderConfigs");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Game", b =>
                {
                    b.Navigation("BrandGames");

                    b.Navigation("GameSessions");
                });

            modelBuilder.Entity("Casino.Domain.Entities.GameSession", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Operator", b =>
                {
                    b.Navigation("BackofficeUsers");

                    b.Navigation("Brands");

                    b.Navigation("LedgerEntries");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Player", b =>
                {
                    b.Navigation("CashierPlayers");

                    b.Navigation("GameSessions");

                    b.Navigation("LedgerEntries");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Casino.Domain.Entities.Round", b =>
                {
                    b.Navigation("LedgerEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
